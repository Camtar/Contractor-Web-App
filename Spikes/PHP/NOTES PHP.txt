<?php
$txt1 = "Learn PHP";
$txt2 = "W3Schools.com";
$x = 5;
$y = 4;

echo "<h2>$txt1</h2>";
echo "Study PHP at $txt2<br>";
echo $x + $y;
?>

String
Integer
Float (floating point numbers - also called double)
Boolean
Array
Object
NULL
Resource

An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647.

Rules for integers:

An integer must have at least one digit
An integer must not have a decimal point
An integer can be either positive or negative
Integers can be specified in three formats: decimal (10-based), hexadecimal 
(16-based - prefixed with 0x) or octal (8-based - prefixed with 0)

$cars = array("Volvo","BMW","Toyota");

<?php
class Car {
    function Car() {
        $this->model = "VW";
    }
}

// create an object
$herbie = new Car();

// show object properties
echo $herbie->model;
?>


Tip: If a variable is created without a value, 
it is automatically assigned a value of NULL.

The special resource type is not an actual data type. 
It is the storing of a reference to functions and resources external to PHP.

A common example of using the resource data type is a database call.

echo strlen("Hello world!"); // outputs 12
echo str_word_count("Hello world!"); // outputs 2
echo strrev("Hello world!"); // outputs !dlrow olleH

he PHP strpos() function searches for a specific text within a string.

If a match is found, the function returns the character 
position of the first match. If no match is found, it will return FALSE.

The example below searches for the text "world" in the string "Hello world!":

<?php
echo strpos("Hello world!", "world"); // outputs 6
?>

Tip: The first character position in a string is 0 (not 1).

echo str_replace("world", "Dolly", "Hello world!"); // outputs Hello Dolly!

http://www.w3schools.com/php/php_ref_string.asp

A constant is an identifier (name) for a simple value. 
The value cannot be changed during the script.

A valid constant name starts with a letter or underscore 
(no $ sign before the constant name).

Note: Unlike variables, constants are automatically 
global across the entire script.

define(name, value, case-insensitive)
name: Specifies the name of the constant
value: Specifies the value of the constant
case-insensitive: Specifies whether the con
stant name should be case-insensitive. Default is false

**	Exponentiation	$x ** $y	Result of 
raising $x to the $y'th power (Introduced in PHP 5.6)
==	Equal	$x == $y	Returns true if 
$x is equal to $y
===	Identical	$x === $y	
Returns true if $x is equal to $y, and they are of the same type

$x and $y
$x or $y
$x xor $y
Or can use && || and ! like Java

$txt1 . $txt2	Concatenation of $txt1 and $txt2
$txt1 .= $txt2	Appends $txt2 to $txt1	Show it »
+	Union	$x + $y	Union of $x and $y	Show it »
==	Equality	$x == $y	Returns true if $x and $y have the same key/value pairs	Show it »
===	Identity	$x === $y	Returns true if $x and $y have the same key/value pairs in the same order and of the same types	Show it »
!=	Inequality	$x != $y	Returns true if $x is not equal to $y	Show it »
<>	Inequality	$x <> $y	Returns true if $x is not equal to $y	Show it »
!==	Non-identity	$x !== $y	Returns true if $x is not identical to $y

$colors = array("red", "green", "blue", "yellow"); 

foreach ($colors as $value) {
    echo "$value <br>";
}

function writeMsg() {
    echo "Hello world!";
}

writeMsg(); // call the function

function setHeight($minheight = 50) {
    echo "The height is : $minheight <br>";
}
Defaults to 50 if nothing passed in.

$cars = array("Volvo", "BMW", "Toyota");
echo "I like " . $cars[0] . ", " . $cars[1] . " and " . $cars[2] . ".";

Indexed arrays - Arrays with a numeric index
Associative arrays - Arrays with named keys
	$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
	$age['Peter'] = "35";
	$age['Ben'] = "37";
	$age['Joe'] = "43";
	foreach($age as $x => $x_value) {
    		echo "Key=" . $x . ", Value=" . $x_value;
    		echo "<br>";
Multidimensional arrays - Arrays containing one or more arrays

$cars = array("Volvo", "BMW", "Toyota");
echo count($cars);
count(); is length of array

http://www.w3schools.com/php/php_ref_array.asp

sort() - sort arrays in ascending order
rsort() - sort arrays in descending order
asort() - sort associative arrays in ascending order, according to the value
ksort() - sort associative arrays in ascending order, according to the key
arsort() - sort associative arrays in descending order, according to the value
krsort() - sort associative arrays in descending order, according to the key

$GLOBALS is a PHP super global variable which is used to access global variables 
from anywhere in the PHP script (also from within functions or methods).

PHP stores all global variables in an array called $GLOBALS[index]. 
The index holds the name of the variable.

$x = 75; 
$y = 25;
 
function addition() { 
    $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y']; 
}

echo $_SERVER['PHP_SELF'];
echo "<br>";
echo $_SERVER['SERVER_NAME'];
echo "<br>";
echo $_SERVER['HTTP_HOST'];
echo "<br>";
echo $_SERVER['HTTP_REFERER'];
echo "<br>";
echo $_SERVER['HTTP_USER_AGENT'];
echo "<br>";
echo $_SERVER['SCRIPT_NAME'];
Outputs: 
/php/demo_global_server.php
www.w3schools.com
www.w3schools.com
http://www.w3schools.com/php/showphp.asp?filename=demo_global_server
Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 
(KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36
/php/demo_global_server.php

http://www.w3schools.com/php/php_superglobals.asp includes more keys that can
be used

PHP $_REQUEST is used to collect data after submitting an HTML form.

<form method="post" action="<?php echo $_SERVER['PHP_SELF'];?>">
  Name: <input type="text" name="fname">
  <input type="submit">
</form>
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // collect value of input field
    $name = $_REQUEST['fname'];
    if (empty($name)) {
        echo "Name is empty";
    } else {
        echo $name;
    }
}
PHP $_POST is widely used to collect form data after submitting an HTML form 
with method="post". $_POST is also widely used to pass variables.

PHP $_GET can also be used to collect form data after submitting an HTML form 
with method="get"
$_GET can also collect data sent in the URL.
<a href="test_get.php?subject=PHP&web=W3schools.com">Test $GET</a>

<?php 
echo "Study " . $_GET['subject'] . " at " . $_GET['web'];
?>

Both GET and POST create an array 
(e.g. array( key => value, key2 => value2, key3 => value3, ...)). 
This array holds key/value pairs, where keys are the names of the form 
controls and values are the input data from the user.

Both GET and POST are treated as $_GET and $_POST. 
These are superglobals, which means that they are always accessible, 
regardless of scope - and you can access them from any function, 
class or file without having to do anything special.

$_GET is an array of variables passed to the current script via the 
URL parameters.

$_POST is an array of variables passed to the current script via the 
HTTP POST method.


Information sent from a form with the GET method is visible to everyone (all variable names and values 
are displayed in the URL). GET also has limits on the amount of information to 
send. The limitation is about 2000 characters. However, because the variables 
are displayed in the URL, it is possible to bookmark the page. This can be 
useful in some cases.

GET may be used for sending non-sensitive data.

Note: GET should NEVER be used for sending passwords or 
other sensitive information!

Information sent from a form with the POST method is invisible to others 
(all names/values are embedded within the body of the HTTP request) and has 
no limits on the amount of information to send.

Moreover POST supports advanced functionality such as support for multi-part 
binary input while uploading files to server.

However, because the variables are not displayed in the URL, it is not possible 
to bookmark the page.

Developers prefer POST for sending form data.


The Form Element
The HTML code of the form looks like this:

<form method="post" action=
"<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

What is the htmlspecialchars() function?

The htmlspecialchars() function converts special characters to HTML entities. 
This means that it will replace HTML characters like < and > with &lt; and &gt;. 
This prevents attackers from exploiting the code by injecting HTML or 
Javascript code (Cross-site Scripting attacks) in forms.

The $_SERVER["PHP_SELF"] variable can be used by hackers!

If PHP_SELF is used in your page then a user can enter a slash (/) and 
then some Cross Site Scripting (XSS) commands to execute.

Cross-site scripting (XSS) is a type of computer security vulnerability 
$_SERVER["PHP_SELF"] exploits can be avoided by using the htmlspecialchars() function.

The form code should look like this:

<form method="post" action="
<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
typically found in Web applications. XSS enables attackers to inject 
client-side script into Web pages viewed by other users.

$_SERVER["PHP_SELF"] exploits can be avoided by using the htmlspecialchars() function.

The form code should look like this:

<form method="post" action=
"<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

http://www.w3schools.com/php/php_form_url_email.asp : validate email? name?

$cars = array
  (
  array("Volvo",22,18),
  array("BMW",15,13),
  array("Saab",5,2),
  array("Land Rover",17,15)
  );

DATE AND TIME INFORMATION http://www.w3schools.com/php/php_date.asp
Functions: http://www.w3schools.com/php/php_ref_date.asp

Directory stuff: http://www.w3schools.com/php/php_ref_directory.asp

Error Functions: http://www.w3schools.com/php/php_ref_error.asp

FILTER FUNCTIONS: http://www.w3schools.com/php/php_ref_filter.asp

It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement.

The include and require statements are identical, except upon failure:

require will produce a fatal error (E_COMPILE_ERROR) and stop the script
include will only produce a warning (E_WARNING) and the script will continue
<?php include 'footer.php';?>

echo readfile("webdictionary.txt"); Opens and just prints out whole file

Opening and reading a file: http://www.w3schools.com/php/php_file_open.asp

One line? echo fgets($myfile);
Check for end of file? !feof($myfile)
More functions: http://www.w3schools.com/php/php_ref_filesystem.asp


What is a Cookie?
A cookie is often used to identify a user. A cookie is a small file that the 
server embeds on the user's computer. Each time the same computer requests a 
page with a browser, it will send the cookie too. With PHP, you can both create 
and retrieve cookie values

Create Cookies With PHP
A cookie is created with the setcookie() function.

Syntax
setcookie(name, value, expire, path, domain, secure, httponly);
Only the name parameter is required. All other parameters are optional.

What is a PHP Session?
When you work with an application, you open it, do some changes, and then 
you close it. This is much like a Session. The computer knows who you are. It 
knows when you start the application and when you end. But on the internet 
there is one problem: the web server does not know who you are or what you do, 
because the HTTP address doesn't maintain state.

Session variables solve this problem by storing user information to be used 
across multiple pages (e.g. username, favorite color, etc). By default, session 
variables last until the user closes the browser.

So; Session variables hold information about one single user, and are 
available to all pages in one application.

Should I Use MySQLi or PDO?
If you need a short answer, it would be "Whatever you like".

Both MySQLi and PDO have their advantages:

PDO will work on 12 different database systems, where as MySQLi will only work 
with MySQL databases.

So, if you have to switch your project to use another database, 
PDO makes the process easy. You only have to change the connection string 
and a few queries. With MySQLi, you will need to rewrite the entire code - 
queries included.

Both are object-oriented, but MySQLi also offers a procedural API.

Both support Prepared Statements. Prepared Statements protect from SQL 
injection, and are very important for web application security.
Tip: If you need a permanent storage, you may want to store the data in a 
database.

$servername = "localhost";
$username = "username";
$password = "password";

// Create connection
$conn = new mysqli($servername, $username, $password);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
} 
echo "Connected successfully";

Note on the object-oriented example above: $connect_error was broken until 
PHP 5.2.9 and 5.3.0. If you need to ensure compatibility with PHP versions 
prior to 5.2.9 and 5.3.0, use the following code instead:

// Check connection
if (mysqli_connect_error()) {
    die("Database connection failed: " . mysqli_connect_error());
}

CREATE DB: 
http://www.w3schools.com/php/php_mysql_create.asp

After a database and a table have been created, we can start 
adding data in them.

Here are some syntax rules to follow:

The SQL query must be quoted in PHP
String values inside the SQL query must be quoted
Numeric values must not be quoted
The word NULL must not be quoted
The INSERT INTO statement is used to add new records to a MySQL table:

INSERT INTO table_name (column1, column2, column3,...)

<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "myDB";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);
// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
} 

$sql = "INSERT INTO MyGuests (firstname, lastname, email)
VALUES ('John', 'Doe', 'john@example.com')";

if ($conn->query($sql) === TRUE) {
    echo "New record created successfully";
} else {
    echo "Error: " . $sql . "<br>" . $conn->error;
}

$conn->close();
?>

<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "myDB";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);
// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
} 

$sql = "INSERT INTO MyGuests (firstname, lastname, email)
VALUES ('John', 'Doe', 'john@example.com');";
$sql .= "INSERT INTO MyGuests (firstname, lastname, email)
VALUES ('Mary', 'Moe', 'mary@example.com');";
$sql .= "INSERT INTO MyGuests (firstname, lastname, email)
VALUES ('Julie', 'Dooley', 'julie@example.com')";

if ($conn->multi_query($sql) === TRUE) {
    echo "New records created successfully";
} else {
    echo "Error: " . $sql . "<br>" . $conn->error;
}

$conn->close();
?>

A prepared statement is a feature used to execute the same (or similar) 
SQL statements repeatedly with high efficiency.

Prepared statements basically work like this:

Prepare: An SQL statement template is created and sent to the database. 
Certain values are left unspecified, called parameters (labeled "?"). 
Example: INSERT INTO MyGuests VALUES(?, ?, ?)
The database parses, compiles, and performs query optimization on the SQL 
statement template, and stores the result without executing it
Execute: At a later time, the application binds the values to the parameters, 
and the database executes the statement. The application may execute the 
statement as many times as it wants with different values
Compared to executing SQL statements directly, prepared statements have two 
main advantages:

Prepared statements reduces parsing time as the preparation on the query is done 
only once (although the statement is executed multiple times)

Bound parameters minimize bandwidth to the server as you need send only the 
parameters each time, and not the whole query

Prepared statements are very useful against SQL injections, because parameter 
values, which are transmitted later using a different protocol, need not be 
correctly escaped. If the original statement template is not derived from 
external input, SQL injection cannot occur.

<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "myDB";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// prepare and bind
$stmt = $conn->prepare("INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)");
$stmt->bind_param("sss", $firstname, $lastname, $email);

// set parameters and execute
$firstname = "John";
$lastname = "Doe";
$email = "john@example.com";
$stmt->execute();

$firstname = "Mary";
$lastname = "Moe";
$email = "mary@example.com";
$stmt->execute();

$firstname = "Julie";
$lastname = "Dooley";
$email = "julie@example.com";
$stmt->execute();

echo "New records created successfully";

$stmt->close();
$conn->close();
?>

In our SQL, we insert a question mark (?) where we want to substitute in an 
integer, string, double or blob value.

Then, have a look at the bind_param() function:

$stmt->bind_param("sss", $firstname, $lastname, $email);
This function binds the parameters to the SQL query and tells the database what 
the parameters are. The "sss" argument lists the types of data that the 
parameters are. The s character tells mysql that the parameter is a string.

The argument may be one of four types:

i - integer
d - double
s - string
b - BLOB
We must have one of these for each parameter.

By telling mysql what type of data to expect, we minimize the risk of SQL 
injections.

Note: If we want to insert any data from external sources (like user input), it 
is very important that the data is sanitized and validated.
SELECT EXAMPLE
<?php
$servername = "localhost";
$username = "username";
$password = "password";
$dbname = "myDB";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);
// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
} 

$sql = "SELECT id, firstname, lastname FROM MyGuests";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    // output data of each row
    while($row = $result->fetch_assoc()) {
        echo "id: " . $row["id"]. " - Name: " . $row["firstname"]. " " . $row["lastname"]. "<br>";
    }
} else {
    echo "0 results";
}
$conn->close();
?>
